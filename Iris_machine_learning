import sys
print('Python: {}'.format(sys.version))
# scipy
import scipy
print('scipy: {}'.format(scipy.__version__))
# numpy
import numpy
print('numpy: {}'.format(numpy.__version__))
# matplotlib
import matplotlib
print('matplotlib: {}'.format(matplotlib.__version__))
# pandas
import pandas
print('pandas: {}'.format(pandas.__version__))
# scikit-learn
import sklearn
print('sklearn: {}'.format(sklearn.__version__))

from pandas.plotting import scatter_matrix
import matplotlib.pyplot as plt
from sklearn import model_selection 
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC

# Load dataset, name it dataset
url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/iris.csv"
names = ['sepal-length', 'sepal-width', 'petal-length', 'petal-width', 'class']
dataset = pandas.read_csv(url, names=names)

# shape of the dataset
print(dataset.shape)
--> (150,5)

# look at the first twenty rows of the data
print(dataset.head(20))

#statistical summary
print(dataset.describe())
--> gives you count, mean, std, min, quartiles, and max

#class distribution
print(dataset.groupby('class').size())
--> tells you how many instances each class
--> class
--> Iris-setosa 50
--> Iris-verginica 50
--> Iris-versicolor 50
--> dtype: int64

#data visualization
#univariate plots
#box and whisker plots
dataset.plot(kind='box', subplots = True, layout=(2,2), sharex=False, sharey = False)
plt.show()
--> shows mox and whisker plots

#histograms
dataset.hist()
plt.show()
--> shows histograms

#multivariate plots
#scatter plot matrix
scatter_matrix(dataset)
plt.show()
--> shows scatter plots

#create models of the data and estimate their accuracy on unseen data
#create a data validation dataset
#Split-out validation dataset
array = dataset.values
X = array[:,0:4]
Y = array[:,4]
validation_size = 0.20
seed = 7
X_train, X_validation, Y_train, Y_validation = model_selection.train_test_split(X, Y, test_size=validation_size, random_state=seed)

#use 10-fold cross validation to estimate accuracy, splitting dataset into ten parts, train on nine of them, and test onf one. 
#repeat for all combinations of train-test splits
#uses the metric of 'accuracy' to evaluate models. This is a ratio of the number of correctly predicted 
instances divided by the total number of instances in the dataset multiplied by 100 to give a percentage.
seed = 7
scoring = 'accuracy'
