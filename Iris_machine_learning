import sys
print('Python: {}'.format(sys.version))
# scipy
import scipy
print('scipy: {}'.format(scipy.__version__))
# numpy
import numpy
print('numpy: {}'.format(numpy.__version__))
# matplotlib
import matplotlib
print('matplotlib: {}'.format(matplotlib.__version__))
# pandas
import pandas
print('pandas: {}'.format(pandas.__version__))
# scikit-learn
import sklearn
print('sklearn: {}'.format(sklearn.__version__))

from pandas.plotting import scatter_matrix
import matplotlib.pyplot as plt
from sklearn import model_selection 
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC

# Load dataset, name it dataset
url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/iris.csv"
names = ['sepal-length', 'sepal-width', 'petal-length', 'petal-width', 'class']
dataset = pandas.read_csv(url, names=names)

# shape of the dataset
print(dataset.shape)
--> (150,5)

# look at the first twenty rows of the data
print(dataset.head(20))

#statistical summary
print(dataset.describe())
--> gives you count, mean, std, min, quartiles, and max

#class distribution
print(dataset.groupby('class').size())
--> tells you how many instances each class
--> class
--> Iris-setosa 50
--> Iris-verginica 50
--> Iris-versicolor 50
--> dtype: int64

#data visualization
#univariate plots
#box and whisker plots
dataset.plot(kind='box', subplots = True, layout=(2,2), sharex=False, sharey = False)
plt.show()
--> shows mox and whisker plots

#histograms
dataset.hist()
plt.show()
--> shows histograms

#multivariate plots
#scatter plot matrix
scatter_matrix(dataset)
plt.show()
--> shows scatter plots

#create models of the data and estimate their accuracy on unseen data
#create a data validation dataset
#Split-out validation dataset
array = dataset.values
X = array[:,0:4]
Y = array[:,4]
validation_size = 0.20
seed = 7
X_train, X_validation, Y_train, Y_validation = model_selection.train_test_split(X, Y, test_size=validation_size, random_state=seed)

#use 10-fold cross validation to estimate accuracy, splitting dataset into ten parts, train on nine of them, and test onf one. 
#repeat for all combinations of train-test splits
#uses the metric of 'accuracy' to evaluate models. This is a ratio of the number of correctly predicted 
instances divided by the total number of instances in the dataset multiplied by 100 to give a percentage.
seed = 7
scoring = 'accuracy'

#Build models --> notice from plots that there are a few linearly separable variables.
#let's evaluate 6 different algorithms
#logistic regression(LR)
#Linear Discriminant Analysis (LDA)
#K-Nearest Neighbors (KNN)
#Classification and Regression Trees (CART)
#Gaussian Naive Bayes (NB)
#Support Vecotr Machines (SVM)
#reset the random number seed before each run to ensure the evaluation of each algortithm is
performed using the exact same data splits

models = []
models.append(('LR', LogisticRegression(solver='liblinear', multi_class='ovr')))
models.append(('LDA', LinearDiscriminantAnalysis()))
models.append(('KNN', KNeighborsClassifier()))
models.append(('CART', DecisionTreeClassifier()))
models.append(('NB', GaussianNB()))
models.append(('SVM', SVC(gamma='auto')))
# evaluate each model in turn
results = []
names = []
for name, model in models:
	kfold = model_selection.KFold(n_splits=10, random_state=seed)
	cv_results = model_selection.cross_val_score(model, X_train, Y_train, cv=kfold, scoring=scoring)
	results.append(cv_results)
	names.append(name)
	msg = "%s: %f (%f)" % (name, cv_results.mean(), cv_results.std())
	print(msg)
--> LR: 0.966667 (0.040825)
--> LDA: 0.975000 (0.038188)
--> KNN: 0.983333 (0.033333)
--> CART: 0.975000 (0.038188)
--> NB: 0.975000 (0.053359)
--> SVM: 0.991667 (0.025000)

#Select the Best Model
#SVM has the largest estimated accuracy score (from the results above)
#create a plot of the model evaluation results and compare the spread and the mean
accuracy of each model. There is a population of accuracy measures for each algortithm because each 
algorithm was evaluated 10 times (10 fold cross validation). 

# Compare Algorithms
fig = plt.figure()
fig.suptitle('Algorithm Comparison')
ax = fig.add_subplot(111)
plt.boxplot(results)
ax.set_xticklabels(names)
plt.show()
#This shows box and whisker plots that are squashed at the top of the range, with many samples
achieving 100% accuracy

#Make Predictions
#test the KNN algortithm on your validation set, summarize the results as a final accuracy score, a confusion matrix, and a classification report

# Make predictions on validation dataset
knn = KNeighborsClassifier()
knn.fit(X_train, Y_train)
predictions = knn.predict(X_validation)
print(accuracy_score(Y_validation, predictions))
print(confusion_matrix(Y_validation, predictions))
print(classification_report(Y_validation, predictions))

#Accuracy with the KNN on the validation set is 90%. Nice. The confusion matrix provides an indication
of the three errors made. Finally, the classification reprot provides a breakdown of each class by precision, recall, f1-score and support showing excellent results. 
